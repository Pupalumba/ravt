"use strict";
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var backend_service_1 = require("../config/backend.service");
var product_service_errors_1 = require("../config/product.service.errors");
var product_1 = require("./product");
require("rxjs/add/operator/map");
var ProductListService = (function () {
    function ProductListService(http) {
        this.http = http;
    }
    ProductListService.prototype.load = function () {
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        return this.http.get(backend_service_1.BackendService.apiUrl + "api/products", {
            headers: headers
        })
            .map(function (res) { return res.json(); })
            .map(function (data) {
            var productList = [];
            data.forEach(function (product) {
                productList.push(new product_1.Product(product._id, product.name, product.type, product.description, product.price, product.highlight, product.date, product.expired, product.promotion, product.promotionPrice, product.images));
            });
            return productList;
        })
            .catch(product_service_errors_1.ErrorService.allProductsNotFound);
    };
    ProductListService.prototype.getById = function (id) {
        var url = backend_service_1.BackendService.apiUrl + "api/product/" + id;
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        return this.http.get(url, {
            headers: headers
        })
            .map(function (res) { return res.json(); })
            .map(function (data) {
            data = data[0];
            var product;
            product = new product_1.Product(data._id, data.name, data.type, data.description, data.price, data.highlight, data.date, data.expired, data.promotion, data.promotionPrice, data.images);
            return product;
        })
            .catch(product_service_errors_1.ErrorService.productNotFound);
    };
    ProductListService.prototype.getPromotions = function () {
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        return this.http.get(backend_service_1.BackendService.apiUrl + "api/products/promotions", {
            headers: headers
        })
            .map(function (res) { return res.json(); })
            .map(function (data) {
            var productList = [];
            data.forEach(function (product) {
                productList.push(new product_1.Product(product._id, product.name, product.type, product.description, product.price, product.highlight, product.date, product.expired, product.promotion, product.promotionPrice, product.images));
            });
            return productList;
        })
            .catch(product_service_errors_1.ErrorService.handleErrors);
    };
    ProductListService.prototype.getProductsOfType = function (type) {
        var url = backend_service_1.BackendService.apiUrl + "api/products/" + type;
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        return this.http.get(url, {
            headers: headers
        })
            .map(function (res) { return res.json(); })
            .map(function (data) {
            var productList = [];
            data.forEach(function (product) {
                productList.push(new product_1.Product(product._id, product.name, product.type, product.description, product.price, product.highlight, product.date, product.expired, product.promotion, product.promotionPrice, product.images));
            });
            return productList;
        })
            .catch(product_service_errors_1.ErrorService.categoryNotFound);
    };
    return ProductListService;
}());
ProductListService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], ProductListService);
exports.ProductListService = ProductListService;
//# sourceMappingURL=data:application/json;base64,